#Begin Portion 1#
import random

# class Server:
#     def __init__(self):
#         """Creates a new server instance, with no active connections."""
#         self.connections = {}

#     def add_connection(self, connection_id):
#         """Adds a new connection to this server."""
#         connection_load = random.random()*10+1
#         # Add the connection to the dictionary with the calculated load

#     def close_connection(self, connection_id):
#         """Closes a connection on this server."""
#         # Remove the connection from the dictionary
#         if connection_id in self.connections:
#             del self.connections[connection_id]
            
#     def load(self):
#         """Calculates the current load for all connections."""
#         total = 0
#         # Add up the load for each of the connections
#         total = sum(self.connections.values())
#         return total

#     def __str__(self):
#         """Returns a string with the current load of the server"""
#         return "{:.2f}%".format(self.load())
    
# #End Portion 1#

# server = Server()
# server.add_connection("192.168.1.1")

# print(server.load())

# server.close_connection("192.168.1.1")
# print(server.load())


#Begin Portion 2#
class LoadBalancing:
    def __init__(self):
        """Initialize the load balancing system with one server"""
        self.connections = {}
        self.servers = [Server()]

    def add_connection(self, connection_id):
        """Randomly selects a server and adds a connection to it."""
        server = random.choice(self.servers)
        # Add the connection to the dictionary with the selected server
        # Add the connection to the server

    def close_connection(self, connection_id):
        """Closes the connection on the the server corresponding to connection_id."""
        # Find out the right server
        # Close the connection on the server
        # Remove the connection from the load balancer

    def avg_load(self):
        """Calculates the average load of all servers"""
        # Sum the load of each server and divide by the amount of servers
        return 0

    def ensure_availability(self):
        """If the average load is higher than 50, spin up a new server"""
        pass

    def __str__(self):
        """Returns a string with the load for each server."""
        loads = [str(server) for server in self.servers]
        return "[{}]".format(",".join(loads))
#End Portion 2#